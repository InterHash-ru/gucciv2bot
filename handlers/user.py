import re
import json
import asyncio
import requests
import binascii

from web3 import Web3
from aiogram import types
from aiogram import Dispatcher
from datetime import datetime, timedelta
from aiogram.dispatcher import FSMContext
from aiogram.utils.deep_linking import get_start_link
from aiogram.dispatcher.filters import Command, CommandStart, Text
from aiogram.utils.markdown import hbold, hcode, hitalic, hunderline, hstrikethrough, hlink


# FILES <
from misc.translate import language
from misc.states import StatesAddWallet, StatesEditName
from misc.filters import IsPrivate, IsAdmin
from misc.help import keyboard_gen, format_number, chunks_generators
from misc.callback_data import pagination_callback, addWallet_callback, network_callback, cancel_callback, settings_callback, settingWallet_callback, history_trans_callback, pagination_history_callback
from misc.callback_data import language_callback, admin_callback, nameWallet_callback, wallet_callback, settingsPage_callback, walletInfo_callback, editWallet_callback, switch_trans_callback, notification_callback
# FILES >

#
# EXTRA FUNCTIONS
#

def get_eth_to_usd_rate():
	coingecko_api_url = "https://api.coingecko.com/api/v3/simple/price"
	params = {
		"ids": "ethereum",
		"vs_currencies": "usd",
		
		}
	response = requests.get(coingecko_api_url, params=params)

	if response.ok:
		result = response.json()
		if "ethereum" in result and "usd" in result["ethereum"]:
			return result["ethereum"]["usd"]
	else:
		response.raise_for_status()

def is_validate_USDTaddress(address):
	headers = {
		"accept": "application/json",
		"content-type": "application/json"
			}
	payload = {
		"address": address
			}
	result = requests.post("https://api.trongrid.io/wallet/validateaddress", json = payload, headers = headers)
	if result.status_code != 200:
		return False
	try:
		if result.json().get("result", False) == True:
			return address
	except:
		return False

def is_validate_ETHaddress(address):
	pattern = r'^(0x)?[0-9a-fA-F]{40}$'    
	# return bool(re.match(pattern, address))
	if re.match(pattern, address):
		return address
	else:
		return False

def get_balance_USDT(address, API_KEY):
	payload = {
		"address": address
	}
	headers = {
		"TRON-FREE-API-KEY" : API_KEY
	}
	result = requests.get("https://apilist.tronscan.org/api/account", headers = headers, params = payload)
	if result:
		token_balance = next((item for item in json.loads(result.text)["trc20token_balances"] if item["tokenAbbr"] == "USDT"), False)
		if token_balance == False:
			return False
		else:
			return float(token_balance["balance"]) / 1000000
	else:
		return False

def get_balance_ETH(address, API_KEY, infura):
	try:
		web3 = Web3(Web3.HTTPProvider("https://mainnet.infura.io/v3/" + infura))
		balance = web3.eth.get_balance(address)
		amount_eth = int(balance) / 10 ** 18
		eth_to_usd = get_eth_to_usd_rate()
		balance_usd = amount_eth * eth_to_usd
		return balance_usd, amount_eth
	except :
		return False

def convert_to_decimal(amount, decimal = 6):
	return int(amount * (10 ** decimal))

def convert_from_decimal(amount, decimal = 6):
	return (amount / (10 ** decimal))		

async def create_wallet_list(db, user_info, p = 0):
	array = list(chunks_generators(await db.get_users_wallet(chat_id = user_info['chat_id']), 10))
	pages = len(array)
	pages_count = str(pages - 1)
	keyboard = types.InlineKeyboardMarkup()
	for item in array[p]:
		network = "üî∏" if item['network'] == "TRON" else "üîπ"
		keyboard.add(types.InlineKeyboardButton(network + "    " + item['name'] + "    " + str('{0:,}'.format(int(item['balance'])).replace(',', ' ')) + " $", callback_data = walletInfo_callback.new(action = "info", id = item['id'])))
	if len(array) > 1:
		keyboard.add(
			types.InlineKeyboardButton("‚óÄÔ∏è", callback_data = pagination_callback.new(action = 'left', page = p, all_pages = pages_count)),
			types.InlineKeyboardButton(f"{p + 1} / " + str(pages), callback_data = pagination_callback.new(action = 'count', page = 0, all_pages = pages_count)),
			types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data = pagination_callback.new(action = 'right', page = p, all_pages = pages_count)))
	keyboard.add(types.InlineKeyboardButton(language("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", user_info['language']), callback_data = addWallet_callback.new(action = "add")))
	return keyboard

async def create_history_list(db, user_info, id_wallet, p = 0):
	wallet = await db.get_info_wallet(id = id_wallet)
	array = list(chunks_generators(await db.get_history_transaction(address = wallet['address']), 10))
	pages = len(array)
	pages_count = str(pages - 1)
	keyboard = types.InlineKeyboardMarkup()
	for item in array[p]:
		direction = "‚¨áÔ∏è" if item['_to'] == wallet['address'] else "‚¨ÜÔ∏è"
		_from = item['_from'][:4] + '...' + item['_from'][-5:]
		_to = item['_to'][:4] + '...' + item['_to'][-5:]
		keyboard.add(types.InlineKeyboardButton(direction + "   from: " + _from + "   to: " + _to +"   SUM: " + str('{0:,}'.format(int(item['amount'])).replace(',', '.')) + " $", url = "https://tronscan.org/#/transaction/" + item['hash_trans']))
	if len(array) > 1:
		keyboard.add(
			types.InlineKeyboardButton("‚óÄÔ∏è", callback_data = pagination_history_callback.new(action = 'left', page = p, all_pages = pages_count, id = id_wallet)),
			types.InlineKeyboardButton(f"{p + 1} / " + str(pages), callback_data = pagination_history_callback.new(action = 'count', page = 0, all_pages = pages_count, id = id_wallet)),
			types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data = pagination_history_callback.new(action = 'right', page = p, all_pages = pages_count, id = id_wallet)))
	return keyboard


#
# HANDLERS USERS
#

async def command_start(message: types.Message, db, user_info, telegram, settings, new_user = False):
	try:
		await state.finish()
		await message.bot.delete_message(user_info['chat_id'], message.message_id - 1)
	except:
		pass

	wallets = await db.get_users_wallet(chat_id = user_info['chat_id'])
	if wallets:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("üóÇ –ö–æ—à–µ–ª—å–∫–∏", user_info['language']), callback_data = wallet_callback.new(action = "walletsPage")))
		# keyboard.add(types.InlineKeyboardButton(language("üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", user_info['language']), callback_data = settingsPage_callback.new(action = 'settingsPage')))
		if user_info['is_admin'] > 0:
			keyboard.add(types.InlineKeyboardButton(language("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", user_info['language']), callback_data = admin_callback.new(action = 'adm_panel')))
		await message.bot.send_photo(chat_id = user_info['chat_id'], photo = settings['media'][0]['start'], reply_markup = keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", user_info['language']), callback_data = addWallet_callback.new(action = 'addWallet')))
		if user_info['is_admin'] > 0:
			keyboard.add(types.InlineKeyboardButton(language("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", user_info['language']), callback_data = admin_callback.new(action = 'adm_panel')))
		text = "\n".join([
			telegram['username'],
			"",
			language("–î–æ–±–∞–≤–ª—è–π Tron –∏ Ethereum –∫–æ—à–µ–ª—å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–∞–º–∏", user_info['language']),
		])
		await message.bot.send_photo(user_info['chat_id'], photo = settings['media'][0]['start'], caption = text, reply_markup = keyboard)

async def wallets_call(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await wallets(call, db, user_info, telegram, settings)

async def wallets(message: types.Message, db, user_info, telegram, settings):
	wallets = await db.get_users_wallet(chat_id = user_info['chat_id'])
	if wallets:
		all_balance = await db.get_total_balance()
		await message.bot.send_message(user_info['chat_id'], text = language("–í—Å–µ–≥–æ ‚âà ", user_info['language']) + hcode(str('{0:,}'.format(int(all_balance['total'])).replace(',', '.')) + " $"), reply_markup = await create_wallet_list(db, user_info))
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", user_info['language']), callback_data = addWallet_callback.new(action = 'addWallet')))
		text = "\n".join([
			language("–¢–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—É—Ç", user_info['language']),
			"",
			language("–î–æ–±–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã", user_info['language']),
		])
		await message.bot.send_photo(user_info['chat_id'], photo = settings['media'][0]['wallets'], caption = text, reply_markup = keyboard)

async def callback_pagination(call: types.CallbackQuery, callback_data: dict, db, user_info):
	if callback_data['action'] == "count":
		await call.bot.answer_callback_query(callback_query_id = call.id, text = '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü üòá', cache_time = 0, show_alert = True)
		return
	if callback_data['action'] == "left":
		if callback_data['page'] == "0":
			await call.bot.answer_callback_query(callback_query_id = call.id, text = '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç—É üôÑ', cache_time = 0, show_alert = True)
			return
		markup = await create_wallet_list(db, user_info, int(callback_data['page']) - 1)
	elif callback_data['action'] == "right":
		if callback_data['page'] == callback_data['all_pages']:
			await call.bot.answer_callback_query(callback_query_id = call.id, text = '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç—É üôÑ', cache_time = 0, show_alert = True)
			return
		markup = await create_wallet_list(db, user_info, int(callback_data['page']) + 1)

	all_balance = await db.get_total_balance()

	await call.bot.edit_message_text(
		chat_id			= user_info['chat_id'],
		message_id		= call.message.message_id,
		text			= language("–í—Å–µ–≥–æ ‚âà ", user_info['language']) + hcode(str('{0:,}'.format(int(all_balance['total'])).replace(',', '.')) + " $"),
		reply_markup	= markup
		)

async def show_info_from_wallet(call: types.CallbackQuery, callback_data: dict, db, user_info, state: FSMContext):
	try:
		await state.finish()
	except:
		pass

	wallet = await db.get_info_wallet(id = callback_data['id'])

	# total_balance = await db.get_total_balance()
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(
				types.InlineKeyboardButton(language("üóì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", user_info['language']), callback_data = history_trans_callback.new(action = 'trans_history', id = callback_data['id'])),
				types.InlineKeyboardButton(language("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", user_info['language']), callback_data = settingWallet_callback.new(action = 'setting_wallet', id = callback_data['id'])),
				types.InlineKeyboardButton("üñ• Etherscan", url = "https://etherscan.io/address/" + wallet['address']) if wallet['network'] == "ETH" else types.InlineKeyboardButton("üñ• Tronscan", url = "https://tronscan.org/#/address/" + wallet['address']),
				)
	keyboard.add(types.InlineKeyboardButton(language("‚Ü©Ô∏è –ù–∞–∑–∞–¥", user_info['language']), callback_data = wallet_callback.new(action = 'back')))

	text = '\n'.join([
		hbold("üîπ" + wallet['name']) if wallet['network'] == "TRON" else hbold("üî∏" + wallet['name']),
		"",
		language("üè¶ –ë–∞–ª–∞–Ω—Å: ‚âà ", user_info['language']) + hitalic(str('{0:,}'.format(int(wallet['balance'])).replace(',', '.')) + " $"),
		"",
		hcode(wallet['address']),
		])
	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard, disable_web_page_preview = True)

async def page_settings_wallet(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	wallet = await db.get_info_wallet(id = callback_data['id'])
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton(language("‚¨áÔ∏è –î–æ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏: –í–ö–õ", user_info['language']) if wallet['input_transactions'] == 1 else language("‚¨áÔ∏è –î–æ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏: –í–´–ö–õ", user_info['language']), callback_data = switch_trans_callback.new(action = 'input', id = callback_data['id'])))
	keyboard.add(types.InlineKeyboardButton(language("‚¨ÜÔ∏è –†–∞—Å—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –í–ö–õ", user_info['language']) if wallet['outgoing_transactions'] == 1 else language("‚¨ÜÔ∏è –†–∞—Å—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –í–´–ö–õ", user_info['language']), callback_data = switch_trans_callback.new(action = 'output', id = callback_data['id'])))
	keyboard.add(
				types.InlineKeyboardButton(language("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", user_info['language']), callback_data = editWallet_callback.new(action = 'editName', id = callback_data['id'])),
				types.InlineKeyboardButton(language("üóë –£–¥–∞–ª–∏—Ç—å", user_info['language']), callback_data = editWallet_callback.new(action = 'delete', id = callback_data['id'])),
				)
	keyboard.add(types.InlineKeyboardButton(language("‚Ü©Ô∏è –ù–∞–∑–∞–¥", user_info['language']), callback_data = walletInfo_callback.new(action = 'StepBack', id = callback_data['id'])))

	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = hbold("‚öôÔ∏è " + wallet['name']), reply_markup = keyboard, disable_web_page_preview = True)

async def page_history_transaction(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	wallet = await db.get_info_wallet(id = callback_data['id'])

	transactions = await db.get_history_transaction(address = wallet['address'])
	if transactions:
		text = '\n'.join([
			language("üóÉ –ò—Å—Ç–æ—Ä–∏—è –∫–æ—à–µ–ª—å–∫–∞: ", user_info['language']) + hbold(wallet['name']) + language(" | –í—Å–µ–≥–æ: ", user_info['language']) + str(len(await db.get_history_transaction(address = wallet['address'])))
			])
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = await create_history_list(db, user_info, callback_data['id']), disable_web_page_preview = True)
	else:
		await call.bot.answer_callback_query(callback_query_id = call.id, text = language('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞', user_info['language']), cache_time = 0, show_alert = True)

async def callback_transaction_pagination(call: types.CallbackQuery, callback_data: dict, db, user_info):
	if callback_data['action'] == "count":
		await call.bot.answer_callback_query(callback_query_id = call.id, text = language('–≠—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü', user_info['language']), cache_time = 0, show_alert = True)
		return
	if callback_data['action'] == "left":
		if callback_data['page'] == "0":
			await call.bot.answer_callback_query(callback_query_id = call.id, text = language('–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç—É', user_info['language']), cache_time = 0, show_alert = True)
			return
		markup = await create_history_list(db, user_info, callback_data['id'], int(callback_data['page']) - 1)
	elif callback_data['action'] == "right":
		if callback_data['page'] == callback_data['all_pages']:
			await call.bot.answer_callback_query(callback_query_id = call.id, text = language('–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç—É', user_info['language']), cache_time = 0, show_alert = True)
			return
		markup = await create_history_list(db, user_info, callback_data['id'], int(callback_data['page']) + 1)

	wallet = await db.get_info_wallet(id = callback_data['id'])
	text = '\n'.join([
		language("üóÉ –ò—Å—Ç–æ—Ä–∏—è –∫–æ—à–µ–ª—å–∫–∞: ", user_info['language']) + hbold("'" + wallet['name'] + "'") + language(" | –í—Å–µ–≥–æ: ", user_info['language']) + str(len(await db.get_history_transaction(address = wallet['address'])))
		])

	await call.bot.edit_message_text(
		chat_id			= user_info['chat_id'],
		message_id		= call.message.message_id,
		text			= text,
		reply_markup	= markup
		)

async def custom_transaction_display(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	wallet = await db.get_info_wallet(id = callback_data['id'])
	if callback_data['action'] == "input":
		await db.input_transaction_display(id = callback_data['id'], value = "0" if wallet['input_transactions'] == 1 else "1")
	elif callback_data['action'] == "output":
		await db.output_transaction_display(id = callback_data['id'], value = "0" if wallet['outgoing_transactions'] == 1 else "1")
	await page_settings_wallet(call, callback_data, db, user_info, settings, telegram)

async def edit_name_wallet(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram, state: FSMContext):
	wallet = await db.get_info_wallet(id = callback_data['id'])
	if callback_data['action'] == "editName":

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("‚Ü©Ô∏è –ù–∞–∑–∞–¥", user_info['language']), callback_data = walletInfo_callback.new(action = 'StepBack', id = callback_data['id'])))
		text = '\n'.join([
			hbold(language("üñå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞", user_info['language']))
			])
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard, disable_web_page_preview = True)
		async with state.proxy() as array:
			array['address'] = wallet['address']
			await StatesEditName.get_name.set()
	elif callback_data['action'] == "delete":
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("üóë –£–¥–∞–ª–∏—Ç—å", user_info['language']), callback_data = editWallet_callback.new(action = 'reject', id = callback_data['id'])),
					types.InlineKeyboardButton(language("‚Ü©Ô∏è –ù–∞–∑–∞–¥", user_info['language']), callback_data = walletInfo_callback.new(action = 'StepBack', id = callback_data['id'])))
		text = '\n'.join([
			hbold(language("‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?", user_info['language']))
			])
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard, disable_web_page_preview = True)
	elif callback_data['action'] == "reject":
		await db.delete_wallet(id = callback_data['id'])
		await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
		await wallets(call, db, user_info, telegram, settings)

async def get_new_name_wallet(message: types.Message, db, user_info, settings, telegram, api, state: FSMContext):
	if message.text:
		if len(message.text) > 35:
			await message.reply(language("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–Ω–∞", user_info['language']), reply_markup = keyboard)
		else:
			async with state.proxy() as array:
				await db.set_name_wallet(address = array['address'], chat_id = user_info['chat_id'], name = message.text)
				await message.bot.send_message(chat_id = user_info['chat_id'], text = hbold(language("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", user_info['language'])))
				await state.finish()
				await wallets(message, db, user_info, telegram, settings)
	else:
		await message.reply(language("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç", user_info['language']))

async def page_add_wallet(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("üîπ Ethereum", callback_data = network_callback.new(network = 'ETH')),
		types.InlineKeyboardButton("üî∏ Tron", callback_data = network_callback.new(network = 'TRON')))
	keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))

	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await call.bot.send_photo(user_info['chat_id'], photo = settings['media'][0]['settings'], caption = language("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", user_info['language']), reply_markup = keyboard)

async def choosing_walletNetwork(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram, state: FSMContext):
	if callback_data['network'] == "TRON":
		async with state.proxy() as array:
			array['try'] = 1
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
		await call.bot.edit_message_caption(chat_id = user_info['chat_id'], message_id = call.message.message_id, caption = language("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å—Å TRON –∫–æ—à–µ–ª—å–∫–∞:", user_info['language']), reply_markup = keyboard)
		await StatesAddWallet.get_TronAddress.set()
	elif callback_data['network'] == "ETH":
		async with state.proxy() as array:
			array['try'] = 1
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
		await call.bot.edit_message_caption(chat_id = user_info['chat_id'], message_id = call.message.message_id, caption = language("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å—Å ETH –∫–æ—à–µ–ª—å–∫–∞:", user_info['language']), reply_markup = keyboard)
		await StatesAddWallet.get_ETHAddress.set()

async def cancel_addWallet(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram, state: FSMContext):
	await state.finish()
	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await command_start(call, db, user_info, telegram, settings)

async def getting_TronAddress(message: types.Message, db, user_info, settings, telegram, api, state: FSMContext):
	async with state.proxy() as array:
		if message.text:
			if array['try'] >= 3:
				await message.reply(language("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫\nüîá –í—ã –∑–∞–º—å—é—á–µ–Ω—ã–π –Ω–∞ 5 –º–∏–Ω—É—Ç", user_info['language']))
				await state.finish()
				await asyncio.sleep(300)
				await message.reply(language("üîâ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã—à–ª–æ" + str(error), user_info['language']))
				await command_start(message, db, user_info, telegram, settings)

			address = is_validate_USDTaddress(address = message.text)
			if address:
				msg = await message.bot.send_message(chat_id = user_info['chat_id'], text = language("üì≤ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ—à–µ–ª–µ–∫...", user_info['language']))
				if await db.search_dublicate(address = address, chat_id = user_info['chat_id']):
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
					await message.reply(language("‚ö†Ô∏è –≠–¢–û–¢ –ö–û–®–ï–õ–ï–ö –£–ñ–ï –î–û–ë–ê–í–õ–ï–ù\n‚ñ™Ô∏è –û–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å—Å", user_info['language']), reply_markup = keyboard)
					await message.bot.delete_message(user_info['chat_id'], msg.message_id)
					array['try'] += 1
				else:
					balance = get_balance_USDT(address, api['tronscan'])
					if balance != False:
						try:
							array['address'] = address
							array['balance'] = round(balance, 2)
							amt_wallet = await db.get_count_TRON_Wallet()
							nameWallet = "TRON_WALLET_" + str(int(amt_wallet['count']) + 1) if amt_wallet else "TRON_WALLET_1"

							await db.add_NEWWallet(address = address, network = "TRON", balance = round(balance, 2), name = nameWallet, chat_id = user_info['chat_id'])
							keyboard = types.InlineKeyboardMarkup()
							keyboard.add(types.InlineKeyboardButton(language("–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ", user_info['language']), callback_data = nameWallet_callback.new(action = "editName")))				
							text = '\n'.join([
								hbold(language("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", user_info['language'])),
								"",
								language("‚ñ™ –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤", user_info['language']),
								language("‚ñ™ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö", user_info['language']),
								"",
								language("–ê–¥—Ä–µ—Å—Å: ") + hcode(address[:6] + '...' + address[-5:]),
								language("–ë–∞–ª–∞–Ω—Å: ") + hcode(str('{0:,}'.format(int(balance)).replace(',', '.')) + " $") if balance else language("–ë–∞–ª–∞–Ω—Å: ") + hcode("0$"),
								language("–ù–∞–∑–≤–∞–Ω–∏–µ: ") + hcode(nameWallet),
								"",
								hitalic(language("‚å®Ô∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞")),
								])

							await message.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = text, reply_markup = keyboard)
							await StatesAddWallet.get_name.set()
						except Exception as error:
							await message.reply(language("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ !\n‚ñ™Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: " + str(error), user_info['language']))
							await message.bot.delete_message(user_info['chat_id'], msg.message_id)
							await state.finish()
							await command_start(message, db, user_info, telegram, settings)
					elif balance == False:
						keyboard = types.InlineKeyboardMarkup()
						keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
						await message.reply(language("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –ë–ê–õ–ê–ù–°\n‚ñ™Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", user_info['language']), reply_markup = keyboard)
						await message.bot.delete_message(user_info['chat_id'], msg.message_id)
						array['try'] += 1
			else:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
				await message.reply(language("‚ö†Ô∏è –≠–¢–û –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –ê–î–†–ï–°–û–ú USDT –ö–û–®–ï–õ–¨–ö–ê\n‚ñ™Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞", user_info['language']), reply_markup = keyboard)
				array['try'] += 1
		else:
			await message.reply(language("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç", user_info['language']))
			array['try'] += 1

async def getting_EthAddress(message: types.Message, db, user_info, settings, telegram, api, state: FSMContext):
	async with state.proxy() as array:
		if message.text:
			if array['try'] >= 3:
				await message.reply(language("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫\nüîá –í—ã –∑–∞–º—å—é—á–µ–Ω—ã–π –Ω–∞ 5 –º–∏–Ω—É—Ç", user_info['language']))
				await state.finish()
				await asyncio.sleep(300)
				await message.reply(language("üîâ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã—à–ª–æ" + str(error), user_info['language']))
				await command_start(message, db, user_info, telegram, settings)

			address = is_validate_ETHaddress(address = message.text)
			if address:
				msg = await message.bot.send_message(chat_id = user_info['chat_id'], text = language("üì≤ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ—à–µ–ª–µ–∫...", user_info['language']))
				if await db.search_dublicate(address = address, chat_id = user_info['chat_id']):
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
					await message.reply(language("‚ö†Ô∏è –≠–¢–û–¢ –ö–û–®–ï–õ–ï–ö –£–ñ–ï –î–û–ë–ê–í–õ–ï–ù\n‚ñ™Ô∏è –û–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å—Å", user_info['language']), reply_markup = keyboard)
					await message.bot.delete_message(user_info['chat_id'], msg.message_id)
					array['try'] += 1
				else:
					balance, amount_eth = get_balance_ETH(address, api['etherscan'], api['infura'])
					if balance != False:
						try:
							array['address'] = address
							array['balance'] = round(balance, 2)
							amt_wallet = await db.get_count_ETH_Wallet()
							nameWallet = "ETH_WALLET_" + str(int(amt_wallet['count']) + 1) if amt_wallet else "ETH_WALLET_1"

							await db.add_NEWWallet(address = address, network = "ETH", balance = round(balance, 2), name = nameWallet, chat_id = user_info['chat_id'])
							keyboard = types.InlineKeyboardMarkup()
							keyboard.add(types.InlineKeyboardButton(language("–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ", user_info['language']), callback_data = nameWallet_callback.new(action = "editName")))				
							text = '\n'.join([
								hbold(language("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", user_info['language'])),
								"",
								language("‚ñ™ –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤", user_info['language']),
								language("‚ñ™ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö", user_info['language']),
								"",
								language("–ê–¥—Ä–µ—Å—Å: ") + hcode(address[:6] + '...' + address[-5:]),
								language("–ë–∞–ª–∞–Ω—Å: ") + hcode(str('{0:,}'.format(int(balance)).replace(',', '.')) + " $") + hcode(f" ({round(amount_eth, 2)} ETH)") if balance else language("–ë–∞–ª–∞–Ω—Å: ") + hcode("0$"),
								language("–ù–∞–∑–≤–∞–Ω–∏–µ: ") + hcode(nameWallet),
								"",
								hitalic(language("‚å®Ô∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞")),
								])

							await message.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = text, reply_markup = keyboard)
							await StatesAddWallet.get_name.set()
						except Exception as error:
							await message.reply(language("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ !\n‚ñ™Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: " + str(error), user_info['language']))
							await message.bot.delete_message(user_info['chat_id'], msg.message_id)
							await state.finish()
							await command_start(message, db, user_info, telegram, settings)
					elif balance == False:
						keyboard = types.InlineKeyboardMarkup()
						keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
						await message.reply(language("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –ë–ê–õ–ê–ù–°\n‚ñ™Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", user_info['language']), reply_markup = keyboard)
						await message.bot.delete_message(user_info['chat_id'], msg.message_id)
						array['try'] += 1
			else:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(language("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", user_info['language']), callback_data = cancel_callback.new(action = 'cancel')))
				await message.reply(language("‚ö†Ô∏è –≠–¢–û –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –ê–î–†–ï–°–û–ú ETH –ö–û–®–ï–õ–¨–ö–ê\n‚ñ™Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞", user_info['language']), reply_markup = keyboard)
				array['try'] += 1
		else:
			await message.reply(language("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç", user_info['language']), reply_markup = keyboard)
			array['try'] += 1

async def keep_nameWallet(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram, state: FSMContext):
	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await state.finish()
	await command_start(call, db, user_info, telegram, settings)

async def name_fromWallet(message: types.Message, db, user_info, settings, telegram, state: FSMContext):
	if message.text:
		if len(message.text) > 35:
			await message.reply(language("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–Ω–∞", user_info['language']), reply_markup = keyboard)
		else:		
			async with state.proxy() as array:
				await db.set_name_wallet(address = array['address'], chat_id = user_info['chat_id'], name = message.text)
				text = '\n'.join([
					hbold(language("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", user_info['language'])),
					"",
					language("‚ñ™ –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤", user_info['language']),
					language("‚ñ™ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö", user_info['language']),
					"",
					language("–ê–¥—Ä–µ—Å—Å: ") + hcode(array['address'][:4] + '...' + array['address'][-5:]),
					language("–ë–∞–ª–∞–Ω—Å: ") + hcode(str(round(array['balance'], 2)) + "$"),
					language("–ù–∞–∑–≤–∞–Ω–∏–µ: ") + hcode(message.text),
					"",
					])
				await message.bot.delete_message(user_info['chat_id'], message.message_id - 1)
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
				await state.finish()
	else:
		await message.reply(language("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç", user_info['language']))

async def settings_page_call(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await page_settings(call, db, user_info, telegram, settings)

async def page_settings(message: types.Message, db, user_info, telegram, settings):
	keyboard = types.InlineKeyboardMarkup()
	if user_info['notification'] == 1:
		keyboard.add(types.InlineKeyboardButton(language("üîî –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", user_info['language']), callback_data = notification_callback.new(action = 'OFF')))
	elif user_info['notification'] == 0:
		keyboard.add(types.InlineKeyboardButton(language("üîï –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", user_info['language']), callback_data = notification_callback.new(action = 'ON')))
	keyboard.add(types.InlineKeyboardButton(language("üåé –Ø–∑—ã–∫ –±–æ—Ç–∞", user_info['language']), callback_data = settings_callback.new(action = 'language')))
	await message.bot.send_message(chat_id = user_info['chat_id'], text = language("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", user_info['language']), reply_markup = keyboard)

async def notification_settings(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	if callback_data['action'] == "OFF":
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("üîï –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", user_info['language']), callback_data = notification_callback.new(action = 'ON')))
		keyboard.add(types.InlineKeyboardButton(language("üåé –Ø–∑—ã–∫ –±–æ—Ç–∞", user_info['language']), callback_data = settings_callback.new(action = 'language')))
		await call.bot.edit_message_reply_markup(chat_id = user_info['chat_id'], message_id = call.message.message_id, reply_markup = keyboard)
		await db.change_notification(chat_id = user_info['chat_id'], value = 0)
	elif callback_data['action'] == "ON":
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("üîî –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", user_info['language']), callback_data = notification_callback.new(action = 'OFF')))
		keyboard.add(types.InlineKeyboardButton(language("üåé –Ø–∑—ã–∫ –±–æ—Ç–∞", user_info['language']), callback_data = settings_callback.new(action = 'language')))
		await db.change_notification(chat_id = user_info['chat_id'], value = 1)
		await call.bot.edit_message_reply_markup(chat_id = user_info['chat_id'], message_id = call.message.message_id, reply_markup = keyboard)

async def setting_value(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	if callback_data['action'] == "language":
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(language("üá∑üá∫ –†—É—Å—Å–∫–∏–π", user_info['language']), callback_data = language_callback.new(lang = 'ru')))
		keyboard.add(types.InlineKeyboardButton(language("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", user_info['language']), callback_data = language_callback.new(lang = 'en')))
		keyboard.add(types.InlineKeyboardButton(language("‚Ü©Ô∏è –ù–∞–∑–∞–¥", user_info['language']), callback_data = settings_callback.new(action = 'back')))	
		await call.bot.edit_message_reply_markup(chat_id = user_info['chat_id'], message_id = call.message.message_id, reply_markup = keyboard)
	elif callback_data['action'] == "back":
		await page_settings(call, db, user_info, telegram, settings)


async def lang_selection(call: types.CallbackQuery, callback_data: dict, db, user_info, settings, telegram):
	await db.set_language(chat_id = user_info['chat_id'], lang = callback_data['lang'])
	user_info = await db.get_info_user(chat_id = user_info['chat_id'])
	await call.bot.delete_message(user_info['chat_id'], call.message.message_id)
	await page_settings(call, db, user_info, telegram, settings)


def register_user(dp: Dispatcher):
	dp.register_message_handler(command_start, CommandStart(), IsPrivate(), state = "*")
	dp.register_message_handler(wallets, Command('wallets'), IsPrivate())
	dp.register_callback_query_handler(wallets_call, wallet_callback.filter())
	dp.register_callback_query_handler(callback_pagination, pagination_callback.filter())
	dp.register_callback_query_handler(show_info_from_wallet, walletInfo_callback.filter(), state = "*")
	dp.register_callback_query_handler(custom_transaction_display, switch_trans_callback.filter())
	dp.register_callback_query_handler(edit_name_wallet, editWallet_callback.filter())
	dp.register_message_handler(get_new_name_wallet, IsPrivate(), state = StatesEditName.get_name, content_types = types.ContentTypes.ANY)
	dp.register_callback_query_handler(page_settings_wallet, settingWallet_callback.filter())
	dp.register_callback_query_handler(page_history_transaction, history_trans_callback.filter())
	dp.register_callback_query_handler(callback_transaction_pagination, pagination_history_callback.filter())
	dp.register_callback_query_handler(page_add_wallet, addWallet_callback.filter())
	dp.register_callback_query_handler(choosing_walletNetwork, network_callback.filter())
	dp.register_message_handler(getting_TronAddress, IsPrivate(), state = StatesAddWallet.get_TronAddress, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(name_fromWallet, IsPrivate(), state = StatesAddWallet.get_name, content_types = types.ContentTypes.ANY)
	dp.register_callback_query_handler(keep_nameWallet, nameWallet_callback.filter(), state = "*")
	dp.register_callback_query_handler(cancel_addWallet, cancel_callback.filter(), state = "*")
	dp.register_message_handler(getting_EthAddress, IsPrivate(), state = StatesAddWallet.get_ETHAddress, content_types = types.ContentTypes.ANY)
	dp.register_callback_query_handler(settings_page_call, settingsPage_callback.filter())
	dp.register_message_handler(page_settings, Command('settings'), IsPrivate())
	dp.register_callback_query_handler(setting_value, settings_callback.filter())
	dp.register_callback_query_handler(notification_settings, notification_callback.filter())
	dp.register_callback_query_handler(lang_selection, language_callback.filter())


